// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  firebaseUid String?  @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  profile  Profile?
  sites    Site[]
  contents Content[]
  plan     Plan?
  metrics  Metric[]

  @@map("users")
}

model Profile {
  id             String   @id @default(cuid())
  userId         String   @unique
  businessType   String
  businessName   String?
  targetAudience String?
  tone           String?  @default("professional") // casual, professional, friendly, formal
  primaryColors  String[] @default([])
  description    String?
  goals          String[] @default([])
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profiles")
}

model Site {
  id          String   @id @default(cuid())
  userId      String
  title       String
  slug        String   @unique
  content     Json?
  template    String   @default("basic")
  isPublished Boolean  @default(false)
  customDomain String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sites")
}

model Content {
  id          String      @id @default(cuid())
  userId      String
  type        ContentType
  title       String
  body        String
  platform    String?     // instagram, facebook, linkedin, etc.
  status      String      @default("draft") // draft, published, scheduled
  scheduledAt DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("contents")
}

model Plan {
  id             String   @id @default(cuid())
  userId         String   @unique
  planType       PlanType @default(FREE)
  stripeCustomerId String?
  subscriptionId String?
  currentPeriodEnd DateTime?
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("plans")
}

model Metric {
  id        String   @id @default(cuid())
  userId    String
  type      String   // page_views, content_generated, sites_created
  value     Int      @default(1)
  metadata  Json?
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("metrics")
}

enum ContentType {
  SOCIAL_POST
  BLOG_POST
  EMAIL
  AD_COPY
  WEBSITE_COPY
}

enum PlanType {
  FREE
  BASIC
  PRO
  ENTERPRISE
}
